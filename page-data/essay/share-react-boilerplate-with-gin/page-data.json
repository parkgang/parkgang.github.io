{"componentChunkName":"component---src-templates-blog-post-js","path":"/essay/share-react-boilerplate-with-gin/","result":{"data":{"site":{"siteMetadata":{"title":"Parkgang Dev Log","author":"parkgang","siteUrl":"https://parkgang.github.io","comment":{"disqusShortName":"","utterances":"parkgang/parkgang.github.io"},"sponsor":{"buyMeACoffeeId":"parkgang"}}},"markdownRemark":{"id":"bec9f85f-7f2e-55ea-b152-c44e4d9399b5","excerpt":"TL;DR gin + react boilerplate 이며 parkgang/react-with-gin-boilerplate 에서 살펴보실 수 있습니다. prod 환경도 json 가져와서 사용하는데 이는 보안에 위험할 수 있으니 기호에 맞게 수정해서 사용해주세요. 예를 들어 환경변수로 바꾸기 Overview 왜 만든건가요? 그동안 golang으로 그렇다 할만한 제품이 없어서 개인 프로젝트로 제품을 하나 제작해보려고 했습니다. 여러 golang…","html":"<h1 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h1>\n<ol>\n<li>gin + react boilerplate 이며 <a href=\"https://github.com/parkgang/react-with-gin-boilerplate\">parkgang/react-with-gin-boilerplate</a> 에서 살펴보실 수 있습니다.</li>\n<li>\n<p>prod 환경도 json 가져와서 사용하는데 이는 보안에 위험할 수 있으니 기호에 맞게 수정해서 사용해주세요.</p>\n<blockquote>\n<p>예를 들어 환경변수로 바꾸기</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"왜-만든건가요\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EB%A7%8C%EB%93%A0%EA%B1%B4%EA%B0%80%EC%9A%94\" aria-label=\"왜 만든건가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 만든건가요?</h2>\n<p>그동안 golang으로 그렇다 할만한 제품이 없어서 개인 프로젝트로 제품을 하나 제작해보려고 했습니다.</p>\n<p>여러 golang의 웹 프레임워크 중 이전부터 많이 찾아보기도 헀고 지켜보고 있던 <code class=\"language-text\">gin</code> 으로 정하고 개발을 하려고 딱 준비를 했더니 신기한 점을 발견할 수 있었습니다.</p>\n<p>뭐 라이브러리나 프레임워크가 얼마나 제공해주느냐에 따라 다르겠지만 기본적으로 개발 환경에 맞는 <code class=\"language-text\">config</code> 값을 주입받을 수 있는 기능과 같이 기본적인 기능이 <code class=\"language-text\">gin</code> 에 있을 줄 알았지만 없었습니다.</p>\n<p>물론 <code class=\"language-text\">gin</code> 자체가 마이크로 웹 프레임워크 이므로 웹 프레임워크게 딱 필요한 기능있는 것이 맞습니다.</p>\n<p>하지만 결국에 제품 개발을 하면서 환경분리 라던지~ 문서화 도구라던지~ 웹 프레임워크에 점점 살이 붙어져 나갈 텐데 이걸 일일이 프로젝트 마다 셋팅하는 것은 비효율적이라고 생각했습니다.</p>\n<p>더구나 필자는 최근에 Server Side는 <code class=\"language-text\">ASP.NET Core</code> Client Side는 <code class=\"language-text\">CRA</code> 을 주로 개발해 왔었고 이외도 Server Side는 <code class=\"language-text\">express.js</code>, <code class=\"language-text\">nest.js</code> Client Side는 <code class=\"language-text\">next.js</code> 으로도 간단하게나 개발 경험이 있었는데 <code class=\"language-text\">ASP.NET Core</code> 같은 것만을 봐도 없는 기능이 무엇인 가 싶을정도로 많은 것을 지원합니다.</p>\n<blockquote>\n<p>특히 <code class=\"language-text\">config</code> 부분을 기본적으로 제공하는 기능이 마음에 들었습니다.</p>\n</blockquote>\n<blockquote>\n<p>너무 익숙함에 속아서 그런지 <code class=\"language-text\">gin</code> 에 살짝 당황했었던… 🥲</p>\n</blockquote>\n<p>그래서 이참에 높은 이해도를 가지고 프로젝트를 시작하고 싶어 <code class=\"language-text\">gin</code> 에다가 <code class=\"language-text\">cra</code> 환경의 react를 사용하는 boilerplate를 만들기로 결심했고 미숙하지만 만들어진 결과물을 공유하려고 합니다.</p>\n<h2 id=\"어떤-것을-중점으로-만들-것인가\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%A4-%EA%B2%83%EC%9D%84-%EC%A4%91%EC%A0%90%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"어떤 것을 중점으로 만들 것인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떤 것을 중점으로 만들 것인가?</h2>\n<p>당연히 기본은 gin server에서 react app 개발이 잘 이뤄지는 것이지만 그래도 저는 프로젝트 스트럭처에 관심많고 명확하고 깔끔 하이어라키를 디자인하고 싶어서 당연한 기본적인 목표 이외 아래의 목표를 추가로 설정하였습니다.</p>\n<h3 id=\"엄격한-타입-정의\" style=\"position:relative;\"><a href=\"#%EC%97%84%EA%B2%A9%ED%95%9C-%ED%83%80%EC%9E%85-%EC%A0%95%EC%9D%98\" aria-label=\"엄격한 타입 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엄격한 타입 정의</h3>\n<p>ts의 유틸리티 타입을 적극 사용해서 우아한 타입을 선언</p>\n<h3 id=\"모호한-문법말고-명확하고-일관성-있게\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%ED%98%B8%ED%95%9C-%EB%AC%B8%EB%B2%95%EB%A7%90%EA%B3%A0-%EB%AA%85%ED%99%95%ED%95%98%EA%B3%A0-%EC%9D%BC%EA%B4%80%EC%84%B1-%EC%9E%88%EA%B2%8C\" aria-label=\"모호한 문법말고 명확하고 일관성 있게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모호한 문법말고 명확하고 일관성 있게</h3>\n<p>특히 js/ts에서 이런 고민이 많이 발생하는데 예를 들어 어떤 경우에 익명함수를 사용할지 화살표 함수를 사용할 지, 모듈에서 <code class=\"language-text\">default</code> 으로 export 되는 친구는 변수명 바로 옆에 <code class=\"language-text\">export default</code> 으로 선언해줄지 해당 파일의 가장 마지막 줄에 선언할 지, 컴포넌트마다 디렉터리를 만들어서 <code class=\"language-text\">index.ts</code> 으로 export 해주는 전략을 사용할지 등 꽤나 고민되는 요소가 많이 있습니다.</p>\n<p>필자는 이런 부분의 규칙을 만드는 것에 매우 관심이 많음으로 이 부분을 감안하여 일관성있는 boilerplate를 만들고 싶었습니다.</p>\n<h3 id=\"server-side-api-문서화-및-http-status-code-명확하게-디자인\" style=\"position:relative;\"><a href=\"#server-side-api-%EB%AC%B8%EC%84%9C%ED%99%94-%EB%B0%8F-http-status-code-%EB%AA%85%ED%99%95%ED%95%98%EA%B2%8C-%EB%94%94%EC%9E%90%EC%9D%B8\" aria-label=\"server side api 문서화 및 http status code 명확하게 디자인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server Side API 문서화 및 Http Status Code 명확하게 디자인</h3>\n<p>요청 성공하면 대충 <code class=\"language-text\">200</code> 으로 response 하는 것이 아닌 각각의 요청 처리에 맞는 Http Status Code 적절히 사용하고 싶었습니다.</p>\n<h3 id=\"recoil-react-query를-이용하여-react-명확하게-상태관리하기\" style=\"position:relative;\"><a href=\"#recoil-react-query%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-react-%EB%AA%85%ED%99%95%ED%95%98%EA%B2%8C-%EC%83%81%ED%83%9C%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"recoil react query를 이용하여 react 명확하게 상태관리하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>recoil, react-query를 이용하여 react 명확하게 상태관리하기</h3>\n<p><code class=\"language-text\">recoil</code> 과 <code class=\"language-text\">react-query</code> 모두 아주 대중적으로 사용되는 라이브러리 아닙니다.</p>\n<blockquote>\n<p>물론 <code class=\"language-text\">redux</code>, <code class=\"language-text\">context api</code> 친구와 비교한다면 이며 기준은 상대적입니다.</p>\n</blockquote>\n<p>필자는 해당 라이브러리를 너무 좋아한다 그래서 이번 boilerplate에 예제 코드를 넣어서 혹시라도 다른 분들께 insight를 전달할 수 있지 아늘까라는 기대로 넣으려고 했습니다.</p>\n<h3 id=\"예외처리\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC\" aria-label=\"예외처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외처리</h3>\n<p>제품 레벨으로써는 너무나도 당연한 것이지만 boilerplate으로 써 앱이 돌아갈 수 있는 환경까지 이면 되는데 여기에 예외처리까지 잘된 코드를 넣고 싶었습니다.</p>\n<blockquote>\n<p>문서화는 덤 ✌️</p>\n</blockquote>\n<h3 id=\"microsoft-teams-ui-component\" style=\"position:relative;\"><a href=\"#microsoft-teams-ui-component\" aria-label=\"microsoft teams ui component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Microsoft Teams UI Component</h3>\n<p>react에 많은 component framework가 있지만 그 중에서도 아주 외소한 <code class=\"language-text\">@fluentui/react-northstar</code> 를 사용해서 Teams 룩앤필이 된 예제코드를 넣고 싶었습니다.</p>\n<p>직장내에서 매신저 앱으로 slack 혹은 teams 혹은 회사마다 다른 사내매신저를 사용하실 텐데 teams를 사용하시는 곳이라면 해당 boilerplate를 보고 오 teams app이다 라는 반가움을 전달하고 싶었습니다.</p>\n<h3 id=\"디버깅-환경\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%B2%84%EA%B9%85-%ED%99%98%EA%B2%BD\" aria-label=\"디버깅 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디버깅 환경</h3>\n<p>프로젝트는 쉽게 실행되어 디버깅에 불편함이 없어야 개발하면서 계속 즐거움이 유지된다고 생각합니다. 이를 꼭 만족시키기 위해 좋은 디버깅 설정 rnd 했습니다.</p>\n<h1 id=\"제작-완료-회고-및-마무리\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%9E%91-%EC%99%84%EB%A3%8C-%ED%9A%8C%EA%B3%A0-%EB%B0%8F-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"제작 완료 회고 및 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제작 완료 회고 및 마무리</h1>\n<p>이렇게 위와 같은 목표로 boilerplate가 완성되었습니다.</p>\n<p><a href=\"https://github.com/parkgang/react-with-gin-boilerplate\">parkgang/react-with-gin-boilerplate</a> 에서 만나보실 수 있으며 기존 예제 코드가 마음에 안드는 경우</p>\n<blockquote>\n<p>예를 들어 mysql을 사용하지 않는 다거나 그냥 바닐라 cra을 원하는 경우</p>\n</blockquote>\n<p>기호에 맞게 수정해서 사용하시면 됩니다.</p>\n<p>이외 개발하면서 생각보다 많은 지식을 필요로 하는 부분은 SPA 이였습니다. 번들링된 정적파일 서빙 부터 CSR Router까지 Front End의 기본을 잘 이해하고 접근해야하는 부분이였는데 상당히 재미있었습니다.</p>\n<p>끝으로 부족한 실력으로 boilerplate를 만들어 보았는데 사용하시는 분이 계실지 모르겠네요. 혹시라도 사용하시게 된다면 티를 내주시면 감사하겠습니다! 그러면 많은 동기부여가 될꺼 같아요! 읽어주셔서 감사합니다.</p>","frontmatter":{"title":"gin과 함께하는 react boilerplate를 공유합니다","date":"September 13, 2021"}}},"pageContext":{"slug":"/essay/share-react-boilerplate-with-gin/","previous":{"fields":{"slug":"/next.js/lets-properly-understand-and-use-the-ssg-of-next.js/"},"frontmatter":{"title":"next.js의 SSG 제대로 이해하고 사용하기","category":"next.js","draft":false}},"next":{"fields":{"slug":"/golang/lets-create-an-http-cache-server-with-golang/"},"frontmatter":{"title":"간단한 HTTP 캐시 서버를 만들어보자 (with golang)","category":"golang","draft":false}}}},"staticQueryHashes":["2486386679","3128451518"]}